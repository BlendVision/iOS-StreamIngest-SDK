// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target arm64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name BVBeautify
import AVFoundation
@_exported import BVBeautify
import BVGfx
import Metal
import MetalKit
import OSLog
import QuartzCore
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import simd
extension os.Logger {
  public static let btf: os.Logger
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class BVBeautifyRenderView : MetalKit.MTKView {
  @_Concurrency.MainActor @preconcurrency public var previewContentMode: UIKit.UIView.ContentMode {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public init(frame: CoreFoundation.CGRect, beautifier: BVBeautify.BVBeautifier)
  @objc deinit
  @_Concurrency.MainActor @preconcurrency public func setActiveCamera(asFront isFrontCamera: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func draw(_ rect: CoreFoundation.CGRect)
}
extension BVBeautify.BVBeautifyRenderView : BVBeautify.BVBeautifierDelegate {
  @_Concurrency.MainActor @preconcurrency public func beautifier(_ beautifier: BVBeautify.BVBeautifier, didOutputProcessedTexture texture: BVGfx.Texture)
}
public struct BVBeautifierProfilingMeasurements {
  public struct Measurement {
    public let name: Swift.String
    public let value: Swift.Double
  }
  public subscript(index: Swift.Int) -> BVBeautify.BVBeautifierProfilingMeasurements.Measurement {
    get
  }
}
public protocol BVBeautifierDelegate : AnyObject {
  func beautifier(_ beautifier: BVBeautify.BVBeautifier, didOutputProcessedTexture texture: BVGfx.Texture)
  func beautifier(_ beautifier: BVBeautify.BVBeautifier, didOutputProcessedSampleBuffer sampleBuffer: CoreMedia.CMSampleBuffer)
  func beautifier(_ beautifier: BVBeautify.BVBeautifier, didUpdatedProfilingMeasurements measurements: BVBeautify.BVBeautifierProfilingMeasurements)
}
extension BVBeautify.BVBeautifierDelegate {
  public func beautifier(_ beautifier: BVBeautify.BVBeautifier, didOutputProcessedTexture texture: BVGfx.Texture)
  public func beautifier(_ beautifier: BVBeautify.BVBeautifier, didOutputProcessedSampleBuffer sampleBuffer: CoreMedia.CMSampleBuffer)
  public func beautifier(_ beautifier: BVBeautify.BVBeautifier, didUpdatedProfilingMeasurements measurements: BVBeautify.BVBeautifierProfilingMeasurements)
}
public class BVBeautifier {
  public var isBeautifyEnabled: Swift.Bool {
    get
    set
  }
  public var smoothness: Swift.Float {
    get
    set
  }
  public var skinToneIntensity: Swift.Float {
    get
    set
  }
  public var inputTexture: BVGfx.VideoTexture! {
    get
  }
  public var outputTexture: BVGfx.Texture {
    get
  }
  public init(enableProfiling: Swift.Bool = false)
  @objc deinit
  public func printTrackedGFXResources()
  public func add(delegate: any BVBeautify.BVBeautifierDelegate)
  public func remove(delegate: any BVBeautify.BVBeautifierDelegate)
  public func setDeviceOrientation(_ orientation: UIKit.UIDeviceOrientation)
  public func setActiveCamera(asFront isFrontCamera: Swift.Bool)
  public func processFrame(in sampleBuffer: CoreMedia.CMSampleBuffer)
}
extension BVBeautify.BVBeautifier : BVGfx.TextureDelegate {
  public func texture(_ texture: BVGfx.Texture, didChangeSize size: BVGfx.Size2i)
}
extension BVBeautify.BVBeautifier : BVGfx.EffectDelegate {
  public func effectDidStartGPUTasks(_ effect: BVGfx.Effect)
  public func effectDidCompleteGPUTasks(_ effect: BVGfx.Effect)
}
public enum BVBeautifierTimers : Swift.Int {
  case frame
  case preProcessing
  case gpuProcessing
  case postProcessing
  case numTimers
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension BVBeautify.BVBeautifierTimers : Swift.Equatable {}
extension BVBeautify.BVBeautifierTimers : Swift.Hashable {}
extension BVBeautify.BVBeautifierTimers : Swift.RawRepresentable {}
