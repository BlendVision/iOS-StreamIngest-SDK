// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.2 effective-5.10 (swiftlang-6.0.2.1.2 clang-1600.0.26.4)
// swift-module-flags: -target arm64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name BVStreamIngest
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFoundation
import Accelerate
import BVBeautify
@_exported import BVStreamIngest
import CoreTelephony
import CoreVideo
import Foundation
import HaishinKit
import Network
import Swift
import UIKit
import VideoToolbox
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum EffectType {
  case unknown
  case skinSmooth
  case skinTone
  public static func == (a: BVStreamIngest.EffectType, b: BVStreamIngest.EffectType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class Effect {
  public var type: BVStreamIngest.EffectType {
    get
  }
  public var intensity: Swift.Int
  public init(intensity: Swift.Int = 0)
  @objc deinit
}
@_inheritsConvenienceInitializers public class SkinSmoothEffect : BVStreamIngest.Effect {
  override public var type: BVStreamIngest.EffectType {
    get
  }
  override public init(intensity: Swift.Int = super)
  @objc deinit
}
@_inheritsConvenienceInitializers public class SkinToneEffect : BVStreamIngest.Effect {
  override public var type: BVStreamIngest.EffectType {
    get
  }
  override public init(intensity: Swift.Int = super)
  @objc deinit
}
public struct EffectStreamIngestConfig {
  public init()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class CameraPreviewView : UIKit.UIView {
  public enum ScaleMode {
    case aspectFit
    case aspectFill
    public static func == (a: BVStreamIngest.CameraPreviewView.ScaleMode, b: BVStreamIngest.CameraPreviewView.ScaleMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor @preconcurrency public var scaleMode: BVStreamIngest.CameraPreviewView.ScaleMode {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency public func switchScaleMode()
  @_Concurrency.MainActor @preconcurrency public func activateCamera(isFrontCamera: Swift.Bool)
  @objc deinit
}
public enum StreamIngestQualityLevel : Swift.String {
  case auto
  case ultraLow
  case low
  case medium
  case high
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol StreamIngestQuality {
  var level: BVStreamIngest.StreamIngestQualityLevel { get }
  func videoSize() async -> CoreFoundation.CGSize
  func videoBitRate() async -> Swift.Int
  func audioBitRate() async -> Swift.Int
}
public struct StreamIngestQualityUltraLow : BVStreamIngest.StreamIngestQuality {
  public var level: BVStreamIngest.StreamIngestQualityLevel {
    get
  }
  public func videoBitRate() async -> Swift.Int
  public func audioBitRate() async -> Swift.Int
  public init()
  public func videoSize() async -> CoreFoundation.CGSize
}
public struct StreamIngestQualityLow : BVStreamIngest.StreamIngestQuality {
  public var level: BVStreamIngest.StreamIngestQualityLevel {
    get
  }
  public func videoBitRate() async -> Swift.Int
  public func audioBitRate() async -> Swift.Int
  public init()
  public func videoSize() async -> CoreFoundation.CGSize
}
public struct StreamIngestQualityMedium : BVStreamIngest.StreamIngestQuality {
  public var level: BVStreamIngest.StreamIngestQualityLevel {
    get
  }
  public func videoSize() async -> CoreFoundation.CGSize
  public func videoBitRate() async -> Swift.Int
  public func audioBitRate() async -> Swift.Int
  public init()
}
public struct StreamIngestQualityHigh : BVStreamIngest.StreamIngestQuality {
  public var level: BVStreamIngest.StreamIngestQualityLevel {
    get
  }
  public func videoSize() async -> CoreFoundation.CGSize
  public func videoBitRate() async -> Swift.Int
  public func audioBitRate() async -> Swift.Int
  public init()
}
public struct StreamIngestQualityAuto : BVStreamIngest.StreamIngestQuality {
  public var level: BVStreamIngest.StreamIngestQualityLevel {
    get
  }
  public func videoSize() async -> CoreFoundation.CGSize
  public func videoBitRate() async -> Swift.Int
  public func audioBitRate() async -> Swift.Int
  public init()
}
public class StreamIngestBufferState {
  public enum BufferState {
    case normal
    case warning
    case critical
    public var description: Swift.String {
      get
    }
    public static func == (a: BVStreamIngest.StreamIngestBufferState.BufferState, b: BVStreamIngest.StreamIngestBufferState.BufferState) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public struct BufferMetrics {
    public let queuedBytes: Swift.Int64
    public let targetBytesPerSecond: Swift.Int64
    public let bufferDuration: Swift.Double
    public var queuedMegabytes: Swift.Double {
      get
    }
    public var targetMegabytesPerSecond: Swift.Double {
      get
    }
  }
  public var status: BVStreamIngest.StreamIngestBufferState.BufferState
  final public let bufferInfo: BVStreamIngest.StreamIngestBufferState.BufferMetrics
  public init(bufferInfo: BVStreamIngest.StreamIngestBufferState.BufferMetrics)
  public var description: Swift.String {
    get
  }
  @objc deinit
}
public protocol EffectStreamIngestDelegate : ObjectiveC.NSObjectProtocol {
  func effectStreamIngest(_ effectStreamIngest: BVStreamIngest.EffectStreamIngest, didOutputVideo sampleBuffer: CoreMedia.CMSampleBuffer) -> CoreMedia.CMSampleBuffer
  func effectStreamIngest(_ effectStreamIngest: BVStreamIngest.EffectStreamIngest, didOutputAudio sampleBuffer: CoreMedia.CMSampleBuffer) -> CoreMedia.CMSampleBuffer
}
extension BVStreamIngest.EffectStreamIngestDelegate {
  public func effectStreamIngest(_ effectStreamIngest: BVStreamIngest.EffectStreamIngest, didOutputVideo sampleBuffer: CoreMedia.CMSampleBuffer) -> CoreMedia.CMSampleBuffer
  public func effectStreamIngest(_ effectStreamIngest: BVStreamIngest.EffectStreamIngest, didOutputAudio sampleBuffer: CoreMedia.CMSampleBuffer) -> CoreMedia.CMSampleBuffer
}
@objc @_hasMissingDesignatedInitializers public class EffectStreamIngest : ObjectiveC.NSObject {
  weak public var delegate: (any BVStreamIngest.EffectStreamIngestDelegate)?
  public var isBeautifyEnabled: Swift.Bool {
    get
    set
  }
  public var effects: [BVStreamIngest.Effect] {
    get
    set
  }
  convenience public init(streamIngest: BVStreamIngest.StreamIngest, config: BVStreamIngest.EffectStreamIngestConfig = EffectStreamIngestConfig())
  @objc deinit
  public func createCameraView(mode: BVStreamIngest.CameraPreviewView.ScaleMode = .aspectFit) -> BVStreamIngest.CameraPreviewView?
  public func attachCamera(device: AVFoundation.AVCaptureDevice) throws
  public func attachAudio(device: AVFoundation.AVCaptureDevice, automaticallyConfiguresApplicationAudioSession: Swift.Bool = false) throws
  public func startRunning()
  public func stopRunning()
  public func detachCamera()
  public func detachAudio()
  public func getEffect(with type: BVStreamIngest.EffectType) -> BVStreamIngest.Effect?
  public func setEffects(_ effects: [BVStreamIngest.Effect])
}
extension BVStreamIngest.EffectStreamIngest : BVBeautify.BVBeautifierDelegate {
  public func beautifier(_ beautifier: BVBeautify.BVBeautifier, didOutputProcessedSampleBuffer sampleBuffer: CoreMedia.CMSampleBuffer)
}
public enum StreamIngestEventName : Swift.String {
  case streamError
  case unknown
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class StreamIngestEvent {
  final public let timestamp: Foundation.Date
  public var name: BVStreamIngest.StreamIngestEventName {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class StreamIngestErrorEvent : BVStreamIngest.StreamIngestEvent {
  override public var name: BVStreamIngest.StreamIngestEventName {
    get
  }
  final public let code: Swift.String
  public var data: Any?
  @objc deinit
}
extension BVStreamIngest.StreamIngest {
  @available(*, deprecated, message: "This method is deprecated and has no effect. The authentication functionality has been moved to StreamIngest.create().")
  final public func requestAuthentication(completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
}
public protocol StreamIngestDelegate : ObjectiveC.NSObjectProtocol {
  func streamIngestDidStartPublishing(_ streamIngest: BVStreamIngest.StreamIngest)
  func streamIngestDidStopPublishing(_ streamIngest: BVStreamIngest.StreamIngest)
  func streamIngestDidFailToPublish(_ streamIngest: BVStreamIngest.StreamIngest, with error: BVStreamIngest.StreamIngestErrorEvent)
  func streamIngestDidStartRetrying(_ streamIngest: BVStreamIngest.StreamIngest)
  func streamIngestDidStopRetrying(_ streamIngest: BVStreamIngest.StreamIngest)
  func streamIngestDidUpdateBufferStatus(_ streamIngest: BVStreamIngest.StreamIngest, with status: BVStreamIngest.StreamIngestBufferState)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class StreamIngest : ObjectiveC.NSObject {
  public static func create(with config: BVStreamIngest.StreamIngestConfig) async throws -> BVStreamIngest.StreamIngest?
  final public var videoBitrate: Swift.Int {
    get
    set
  }
  final public var videoSize: CoreFoundation.CGSize {
    get
    set
  }
  final public var audioBitrate: Swift.Int {
    get
    set
  }
  final public var info: HaishinKit.RTMPStreamInfo? {
    get
  }
  final public var paused: Swift.Bool {
    get
    set
  }
  final public var currentFPS: Swift.UInt16 {
    get
  }
  weak final public var delegate: (any BVStreamIngest.StreamIngestDelegate)?
  final public var videoOrientation: UIKit.UIInterfaceOrientation {
    get
    set
  }
  @objc deinit
  @objc override final public func addObserver(_ observer: ObjectiveC.NSObject, forKeyPath keyPath: Swift.String, options: Foundation.NSKeyValueObservingOptions = [], context: Swift.UnsafeMutableRawPointer?)
  @objc override final public func removeObserver(_ observer: ObjectiveC.NSObject, forKeyPath keyPath: Swift.String)
  final public func attachCamera(_ device: AVFoundation.AVCaptureDevice?, channel: Swift.UInt8 = 0, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  final public func attachAudio(_ device: AVFoundation.AVCaptureDevice?, automaticallyConfiguresApplicationAudioSession: Swift.Bool = false, completion: (((any Swift.Error)?) -> Swift.Void)? = nil)
  final public func append(sampleBuffer: CoreMedia.CMSampleBuffer)
  final public func startPublish(rtmpUrl: Swift.String, stream name: Swift.String)
  final public func stopPublish()
  final public func close()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency final public class StreamRenderView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency final public var mode: AVFoundation.AVLayerVideoGravity {
    get
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency final public func attachStream(_ stream: BVStreamIngest.StreamIngest?)
  @_Concurrency.MainActor @preconcurrency final public func setVideoGravity(_ gravity: AVFoundation.AVLayerVideoGravity)
  @objc deinit
}
public class StreamIngestConfig {
  public var key: Swift.String
  final public let maxRetryAttempts: Swift.Int
  public init(key: Swift.String, maxRetryAttempts: Swift.Int = 5)
  @objc deinit
}
extension BVStreamIngest.EffectType : Swift.Equatable {}
extension BVStreamIngest.EffectType : Swift.Hashable {}
extension BVStreamIngest.CameraPreviewView.ScaleMode : Swift.Equatable {}
extension BVStreamIngest.CameraPreviewView.ScaleMode : Swift.Hashable {}
extension BVStreamIngest.StreamIngestQualityLevel : Swift.Equatable {}
extension BVStreamIngest.StreamIngestQualityLevel : Swift.Hashable {}
extension BVStreamIngest.StreamIngestQualityLevel : Swift.RawRepresentable {}
extension BVStreamIngest.StreamIngestBufferState.BufferState : Swift.Equatable {}
extension BVStreamIngest.StreamIngestBufferState.BufferState : Swift.Hashable {}
extension BVStreamIngest.StreamIngestEventName : Swift.Equatable {}
extension BVStreamIngest.StreamIngestEventName : Swift.Hashable {}
extension BVStreamIngest.StreamIngestEventName : Swift.RawRepresentable {}
